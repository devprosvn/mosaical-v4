import { BrowserProvider, Contract } from 'ethers';
import { CONTRACT_ADDRESSES } from '../constants/contracts';

// ERC721 ABI c·∫ßn thi·∫øt ƒë·ªÉ ƒë·ªçc NFTs
const ERC721_ABI = [
  "function balanceOf(address owner) view returns (uint256)",
  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
  "function ownerOf(uint256 tokenId) view returns (address)",
  "function tokenURI(uint256 tokenId) view returns (string)",
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function supportsInterface(bytes4 interfaceId) view returns (bool)"
];

// Interface cho NFT metadata
interface NFTMetadata {
  name?: string;
  description?: string;
  image?: string;
  attributes?: Array<{
    trait_type: string;
    value: string | number;
  }>;
}

interface NFTInfo {
  tokenId: string;
  title: string;
  description: string;
  image: string;
  collectionAddress: string;
  collectionName: string;
  metadata?: NFTMetadata;
}

// Danh s√°ch c√°c collection ƒë∆∞·ª£c h·ªó tr·ª£
const SUPPORTED_COLLECTIONS = [
  {
    address: CONTRACT_ADDRESSES.MockGameNFT,
    name: "Mock Game NFT",
    symbol: "TGNFT"
  }
  // C√≥ th·ªÉ th√™m c√°c collection kh√°c ·ªü ƒë√¢y
];

/**
 * L·∫•y danh s√°ch NFTs t·ª´ m·ªôt collection c·ª• th·ªÉ
 */
async function getNFTsFromCollection(
  provider: BrowserProvider, 
  userAddress: string, 
  collectionAddress: string,
  collectionName: string
): Promise<NFTInfo[]> {
  try {
    const contract = new Contract(collectionAddress, ERC721_ABI, provider);
    
    // Ki·ªÉm tra xem contract c√≥ ph·∫£i ERC721 kh√¥ng
    try {
      const isERC721 = await contract.supportsInterface('0x80ac58cd');
      if (!isERC721) {
        console.log(`Contract ${collectionAddress} is not ERC721`);
        return [];
      }
    } catch (e) {
      console.log(`Cannot check interface for ${collectionAddress}`);
    }

    // L·∫•y s·ªë l∆∞·ª£ng NFTs c·ªßa user
    const balance = await contract.balanceOf(userAddress);
    const balanceNum = parseInt(balance.toString());
    
    if (balanceNum === 0) {
      return [];
    }

    console.log(`Found ${balanceNum} NFTs in collection ${collectionName}`);

    const nfts: NFTInfo[] = [];

    // L·∫•y t·ª´ng NFT b·∫±ng tokenOfOwnerByIndex (n·∫øu contract h·ªó tr·ª£)
    try {
      for (let i = 0; i < balanceNum; i++) {
        try {
          const tokenId = await contract.tokenOfOwnerByIndex(userAddress, i);
          const nft = await processNFT(contract, tokenId.toString(), collectionAddress, collectionName);
          if (nft) {
            nfts.push(nft);
          }
        } catch (e) {
          console.error(`Error getting NFT at index ${i}:`, e);
        }
      }
    } catch (e) {
      // N·∫øu contract kh√¥ng h·ªó tr·ª£ tokenOfOwnerByIndex, fallback sang scan method
      console.log(`Collection ${collectionName} doesn't support enumeration, using scan method`);
      return await scanNFTsByOwnership(contract, userAddress, collectionAddress, collectionName, balanceNum);
    }

    return nfts;
  } catch (error) {
    console.error(`Error fetching NFTs from ${collectionName}:`, error);
    return [];
  }
}

/**
 * Fallback method: Scan NFTs b·∫±ng c√°ch ki·ªÉm tra ownership
 */
async function scanNFTsByOwnership(
  contract: Contract,
  userAddress: string,
  collectionAddress: string,
  collectionName: string,
  expectedCount: number
): Promise<NFTInfo[]> {
  const nfts: NFTInfo[] = [];
  const maxScan = 10000; // Gi·ªõi h·∫°n scan ƒë·ªÉ tr√°nh infinite loop
  
  for (let tokenId = 0; tokenId < maxScan && nfts.length < expectedCount; tokenId++) {
    try {
      const owner = await contract.ownerOf(tokenId);
      if (owner.toLowerCase() === userAddress.toLowerCase()) {
        const nft = await processNFT(contract, tokenId.toString(), collectionAddress, collectionName);
        if (nft) {
          nfts.push(nft);
        }
      }
    } catch (e) {
      // Token kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói kh√°c, ti·∫øp t·ª•c scan
      continue;
    }
  }
  
  return nfts;
}

/**
 * X·ª≠ l√Ω th√¥ng tin c·ªßa m·ªôt NFT c·ª• th·ªÉ
 */
async function processNFT(
  contract: Contract,
  tokenId: string,
  collectionAddress: string,
  collectionName: string
): Promise<NFTInfo | null> {
  try {
    let metadata: NFTMetadata = {};
    let title = `${collectionName} #${tokenId}`;
    let description = 'GameFi NFT Asset';
    let image = `https://via.placeholder.com/300/0a0a1a/00f6ff?text=NFT+%23${tokenId}`;

    // L·∫•y metadata t·ª´ tokenURI
    try {
      const tokenURI = await contract.tokenURI(tokenId);
      if (tokenURI) {
        metadata = await fetchNFTMetadata(tokenURI);
        if (metadata.name) title = metadata.name;
        if (metadata.description) description = metadata.description;
        if (metadata.image) image = metadata.image;
      }
    } catch (e) {
      console.log(`Cannot fetch metadata for token ${tokenId}:`, e);
    }

    return {
      tokenId,
      title,
      description,
      image,
      collectionAddress,
      collectionName,
      metadata
    };
  } catch (error) {
    console.error(`Error processing NFT ${tokenId}:`, error);
    return null;
  }
}

/**
 * Fetch metadata t·ª´ tokenURI
 */
async function fetchNFTMetadata(tokenURI: string): Promise<NFTMetadata> {
  try {
    // X·ª≠ l√Ω data URI (base64)
    if (tokenURI.startsWith('data:application/json;base64,')) {
      const base64Data = tokenURI.split(',')[1];
      const jsonString = atob(base64Data);
      return JSON.parse(jsonString);
    }
    
    // X·ª≠ l√Ω data URI (plain JSON)
    if (tokenURI.startsWith('data:application/json,')) {
      const jsonString = decodeURIComponent(tokenURI.split(',')[1]);
      return JSON.parse(jsonString);
    }
    
    // X·ª≠ l√Ω HTTP/HTTPS URL
    if (tokenURI.startsWith('http')) {
      const response = await fetch(tokenURI);
      if (response.ok) {
        return await response.json();
      }
    }
    
    // X·ª≠ l√Ω IPFS URL
    if (tokenURI.startsWith('ipfs://')) {
      const ipfsHash = tokenURI.replace('ipfs://', '');
      const ipfsUrl = `https://ipfs.io/ipfs/${ipfsHash}`;
      const response = await fetch(ipfsUrl);
      if (response.ok) {
        return await response.json();
      }
    }
    
    return {};
  } catch (error) {
    console.error('Error fetching NFT metadata:', error);
    return {};
  }
}

/**
 * L·∫•y t·∫•t c·∫£ NFTs c·ªßa user t·ª´ c√°c collection ƒë∆∞·ª£c h·ªó tr·ª£
 */
export async function getUserNFTs(provider: BrowserProvider, userAddress: string): Promise<NFTInfo[]> {
  console.log('üîç Fetching NFTs for user:', userAddress);
  
  const allNFTs: NFTInfo[] = [];
  
  // L·∫•y NFTs t·ª´ t·∫•t c·∫£ c√°c collection ƒë∆∞·ª£c h·ªó tr·ª£
  for (const collection of SUPPORTED_COLLECTIONS) {
    try {
      const nfts = await getNFTsFromCollection(
        provider, 
        userAddress, 
        collection.address, 
        collection.name
      );
      allNFTs.push(...nfts);
      console.log(`Found ${nfts.length} NFTs in ${collection.name}`);
    } catch (error) {
      console.error(`Error fetching from ${collection.name}:`, error);
    }
  }
  
  console.log(`Total NFTs found: ${allNFTs.length}`);
  return allNFTs;
}

/**
 * L·∫•y NFTs t·ª´ m·ªôt collection c·ª• th·ªÉ (ƒë·ªÉ s·ª≠ d·ª•ng trong admin panel)
 */
export async function getNFTsFromSpecificCollection(
  provider: BrowserProvider,
  userAddress: string,
  collectionAddress: string
): Promise<NFTInfo[]> {
  try {
    const contract = new Contract(collectionAddress, ERC721_ABI, provider);
    const name = await contract.name();
    return await getNFTsFromCollection(provider, userAddress, collectionAddress, name);
  } catch (error) {
    console.error('Error fetching from specific collection:', error);
    return [];
  }
}

/**
 * Ki·ªÉm tra xem m·ªôt ƒë·ªãa ch·ªâ c√≥ ph·∫£i l√† ERC721 contract kh√¥ng
 */
export async function isERC721Contract(provider: BrowserProvider, address: string): Promise<boolean> {
  try {
    const contract = new Contract(address, ERC721_ABI, provider);
    return await contract.supportsInterface('0x80ac58cd');
  } catch (error) {
    return false;
  }
}